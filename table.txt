import dash
from dash import dash_table,dcc,html
from dash.dependencies import Output,Input,State
import dash_bootstrap_components as dbc
import pandas as pd
from dash.exceptions import PreventUpdate
###########read from file ##############
fileName="E:\MyFile.txt"
file = open(fileName,"a")
with open(fileName) as f:
    lines = f.readlines()

db={}
for line in lines:
    str2=''
    str,str2=line.split(',')

    str3=str2.replace('\n', '')
    db[str] = str3
##########end of reading ############

MainPage=html.Div([
         dcc.Graph(id='bar',figure={
        'data': [
            {'x': [1,2,3], 'y': [3,2,3], 'type': 'bar', 'name': 'SF'},

        ],
        'layout': {
            'title': 'Dash Data Visualization'
        }
        },style={'font-size': '11px','text-align':'center'}
                    )])

Users = html.Div([

dash_table.DataTable(
    id='table',
    columns=[{'name':'user','id':'user'},
             {'name':'password','id':'password'}
             ],
    data=[{'user':j,'password':db[j]}for j in db],
    editable=True,
    row_deletable=False
),html.Button('updata', id='updata',hidden=True, n_clicks=0),
])

RemoveUser=html.Div([

    html.Div(
             [dcc.Dropdown(id='dropdown', options=[{'label': i, 'value': i} for i in db],
                          style={'width':'50%','position': 'responsive','float': 'left' }) ,
             dcc.Input(id="remove_password", type="text", placeholder="Enter Password",
                       style={'position': 'responsive'})]
                 ),

    html.Div(html.Button('Remove', id='button',
      style={'width': 100, 'height': 40,'margin-top':'40px','border-width':'0px','background-color':'#blue','float': 'left'})),
    html.Div('',id='remove_message')

],style={ })

AddUser=html.Div([

html.Div(
dcc.Input(id="user",value='', type="text", placeholder="Enter Username",className="inputbox1",
style={'margin-left':'15%','width':'450px','height':'45px','padding':'10px','margin-top':'60px',
'font-size':'16px','border-width':'1px','border-color':'#a0a3a2'
}),
),
html.Div(
dcc.Input(id="password1",value='', type="password", placeholder="Enter Password",className="inputbox2",
style={'margin-left':'15%','width':'450px','height':'45px','padding':'10px','margin-top':'5%',
'font-size':'16px','border-width':'1px','border-color':'#a0a3a2',
}),
),
html.Div(
dcc.Input(id="password2",value='', type="password", placeholder="Confirm Password",className="inputbox3",
style={'margin-left':'15%','width':'450px','height':'45px','padding':'10px','margin-top':'5%',
'font-size':'16px','border-width':'1px','border-color':'#a0a3a2','position':'responsive'
}),
),
html.Div(
html.Button('Save', id='Save', n_clicks=0, style={'width': 100, 'height': 40,'margin-top':'30px','border-width':'0px','background-color':'#blue'}),
style={'margin-left':'32%','padding-top':'30px'}),
html.Div('',id='output1')
])

app = dash.Dash(__name__,suppress_callback_exceptions=True,external_stylesheets=[dbc.themes.BOOTSTRAP])

SIDEBAR_STYLE = {
    "position": "fixed",
    "top": 0,
    "left": 0,
    "bottom": 0,
    "width": "10rem",
    "padding": "2rem 1rem",
    "background-color": "#f8f9fa",
}
sidebar = html.Div([
        html.Div("TATBEEK", className="display-4",style={'font-size':'40px','color':'lightblue'}),
        html.Hr(),
        dbc.Nav(
            [
                dbc.NavLink("Users", href="/Users", active="exact"),
                dbc.NavLink("Add User", href="/AddUser", active="exact"),
                dbc.NavLink("Remove User", href="/RemoveUser", active="exact"),

            ],
            vertical=True,
            pills=True,
        ),
        ],style=SIDEBAR_STYLE )

UserPageContentStyle = {
    "margin-left": "18rem",
    "margin-right": "2rem",
    "padding": "2rem 1rem",
}
UsersContent = html.Div(id="User-page-content", children=[Users], style=UserPageContentStyle)

UsersManager=html.Div([
    dcc.Location(id="url"),sidebar,UsersContent,

])

app.layout =html.Div([UsersManager])



####sisebar buttons########
@app.callback(
    Output("User-page-content", "children"),
    [Input("url", "pathname")]
)
def  render_users_page_content(pathname):
    if pathname == "/Users":
        return [
            Users
        ]
    elif pathname == "/AddUser":
        return [
            AddUser
        ]
    elif pathname == "/RemoveUser":
        return [
            RemoveUser
        ]


@app.callback(
    Output('output1', 'children'),

    Input('Save', 'n_clicks'),

    State('user', 'value'),
    State('password1', 'value'),
    State('password2', 'value'),
)
def add_user(n_clicks,name,passw1,passw2):
    if n_clicks is None:
        raise PreventUpdate
    else :
        if name == '' or name == None:
            return html.Div('')

        if name != '' or name != None:
            BoolChecker = True
            for i in db:
                if i == name:
                    BoolChecker = False

            if BoolChecker == True:
                if passw1 == '' or passw1 == None or passw2 == '' or passw2 == None:
                    return html.Div('Please Enter Password')
                if passw1 == passw2:
                    myfile = open("E:\MyFile.txt", "a")
                    myfile.writelines(name + ',' + passw1 + '\n')


                    return html.Div('Successfully Added')
                if passw1 != passw2:
                    return html.Div('Passwords Are Not The Same')
            else:
                return html.Div('User Name Already in use')




@app.callback(
    Output('table', 'data'),
    Input('updata', 'n_clicks'),
)
def UpdateTable(n_clicks):
    if n_clicks is None:
        raise PreventUpdate
    else :
        fileName = "E:\MyFile.txt"
        file = open(fileName, "a")
        with open(fileName) as f:
            lines = f.readlines()

        db2 = {}
        for line in lines:
            str2 = ''
            str, str2 = line.split(',')

            str3 = str2.replace('\n', '')
            db2[str] = str3
            d=[{'user':j,'password':db2[j]}for j in db2]

        return d


@app.callback(
    Output('remove_message', 'children'),
    Input('button', 'n_clicks'),
    State('dropdown', 'value'),
    State('remove_password', 'value'),
)
def remove_user(n_clicks,user2,passw3):
    if n_clicks is None:
        raise PreventUpdate
    else:
        if user2 is not None or user2 =='' :
            if db[user2] == passw3:
                return html.Div('success')

            else :
                return html.Div('wrong password')
        else :
            return html.Div('')


if __name__ == '__main__':
    app.run_server(port=8070,debug=True)
